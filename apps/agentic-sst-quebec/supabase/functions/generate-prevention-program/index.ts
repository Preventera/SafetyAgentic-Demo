
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ProgramGenerationParams {
  companyName: string;
  secteurScian: string;
  groupePrioritaire: number;
  nombreEmployes: number;
  activitesPrincipales: string;
  typeDocument: string;
  acteurResponsable: string;
  risquesIdentifies?: string[];
  cnessData?: any;
  customPrompt?: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const anthropicApiKey = Deno.env.get('ANTHROPIC_API_KEY');
    if (!anthropicApiKey) {
      throw new Error('ANTHROPIC_API_KEY non configur√©e');
    }

    const params: ProgramGenerationParams = await req.json();
    
    // Construction du prompt syst√®me pour Claude
    const systemPrompt = `Tu es PPAI, un expert en sant√©-s√©curit√© au travail sp√©cialis√© dans les normes qu√©b√©coises CNESST/LMRSST.

EXIGENCES OBLIGATOIRES bas√©es sur la LSST :
1. Identification des principales sources de risques (Art. 59)
2. Mesures pour √©liminer/contr√¥ler les risques selon la hi√©rarchie de pr√©vention (Art. 51)
3. Mesures pour garantir la durabilit√© des correctifs
4. √âch√©ancier et modalit√©s de r√©alisation avec responsables d√©sign√©s
5. Mesures de surveillance et d'entretien
6. Formation et information des travailleurs
7. Identification des √©quipements de protection individuelle
8. Participation des travailleurs (comit√© SST)
9. Service de premiers soins
10. Surveillance de la sant√© des travailleurs

HI√âRARCHIE DE PR√âVENTION (Art. 51 LSST) :
1. √âlimination du danger √† la source
2. Substitution par quelque chose de moins dangereux
3. Contr√¥les techniques (ventilation, protection collective)
4. Mesures administratives (proc√©dures, formation)
5. √âquipements de protection individuelle (en dernier recours)

FORMAT REQUIS :
- Structure claire avec sections num√©rot√©es
- Mesures concr√®tes et applicables
- R√©f√©rences l√©gales pr√©cises (LSST, RSST)
- √âch√©anciers r√©alistes avec responsables nomm√©s
- Indicateurs de suivi mesurables

G√©n√®re UNIQUEMENT du contenu conforme aux exigences CNESST/LMRSST.`;

    // Construction du prompt utilisateur
    let userPrompt = '';
    
    if (params.customPrompt) {
      // Si un prompt personnalis√© est fourni (du g√©n√©rateur intelligent)
      userPrompt = params.customPrompt;
    } else {
      // Construction automatique pour le g√©n√©rateur de prototypes
      let cnessContext = '';
      if (params.cnessData) {
        cnessContext = `\nüìä DONN√âES CNESST DISPONIBLES:
- Secteur d'activit√© avec statistiques d'incidents
- Agents causals sp√©cifiques au secteur
- Mesures pr√©ventives recommand√©es avec efficacit√© prouv√©e
- Int√©grer ces donn√©es dans les recommandations`;
      }

      userPrompt = `G√©n√®re un ${params.typeDocument} complet pour :

**CONTEXTE ENTREPRISE :**
- Nom : ${params.companyName}
- Secteur SCIAN : ${params.secteurScian}
- Groupe prioritaire CNESST : ${params.groupePrioritaire}
- Nombre d'employ√©s : ${params.nombreEmployes}
- Activit√©s principales : ${params.activitesPrincipales}
- Acteur responsable : ${params.acteurResponsable}
${params.risquesIdentifies ? `- Risques identifi√©s : ${params.risquesIdentifies.join(', ')}` : ''}${cnessContext}

**SP√âCIFICIT√âS SECTORIELLES :**
Adapte le contenu aux risques typiques du secteur ${params.secteurScian} et respecte les obligations du groupe ${params.groupePrioritaire} CNESST.

**STRUCTURE ATTENDUE :**
1. IDENTIFICATION DES PRINCIPALES SOURCES DE RISQUES
2. MESURES DE PR√âVENTION (hi√©rarchie Art. 51)
3. √âCH√âANCIER ET RESPONSABILIT√âS
4. FORMATION ET INFORMATION
5. √âQUIPEMENTS DE PROTECTION
6. SURVEILLANCE ET ENTRETIEN
7. PARTICIPATION DES TRAVAILLEURS
8. PREMIERS SOINS
9. SURVEILLANCE M√âDICALE
10. R√âVISION ET MISE √Ä JOUR

G√©n√®re un document professionnel, d√©taill√© et conforme CNESST.`;
    }

    console.log('G√©n√©ration avec Claude pour:', params.companyName);

    // Appel √† l'API Claude
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': anthropicApiKey,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 4000,
        temperature: 0.3,
        system: systemPrompt,
        messages: [
          {
            role: 'user',
            content: userPrompt
          }
        ]
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('Erreur API Claude:', response.status, errorData);
      throw new Error(`Erreur API Claude: ${response.status}`);
    }

    const data = await response.json();
    const generatedContent = data.content[0].text;

    // Validation basique de conformit√©
    const validateBasicCompliance = (content: string): boolean => {
      const requiredElements = [
        'identification',
        'risques',
        'pr√©vention',
        'mesures',
        'responsable',
        '√©ch√©ancier',
        'formation',
        'surveillance'
      ];

      return requiredElements.every(element => 
        content.toLowerCase().includes(element)
      );
    };

    // Extraction des r√©f√©rences l√©gales
    const extractLegalReferences = (content: string): string[] => {
      const references: string[] = [];
      const lsstRegex = /LSST\s+(Art\.|Article)\s*(\d+)/gi;
      const rsstRegex = /RSST\s+(Art\.|Article)\s*(\d+)/gi;
      
      let match;
      while ((match = lsstRegex.exec(content)) !== null) {
        references.push(`LSST Art. ${match[2]}`);
      }
      
      while ((match = rsstRegex.exec(content)) !== null) {
        references.push(`RSST Art. ${match[2]}`);
      }
      
      return [...new Set(references)];
    };

    const isCompliant = validateBasicCompliance(generatedContent);
    const legalRefs = extractLegalReferences(generatedContent);

    const result = {
      content: generatedContent,
      metadata: {
        secteur: params.secteurScian,
        groupe: params.groupePrioritaire,
        conformite: isCompliant,
        referencesLegales: legalRefs,
        generatedAt: new Date().toISOString(),
        model: 'claude-3-5-sonnet',
        tokens: data.usage?.output_tokens || 0
      }
    };

    console.log('Programme g√©n√©r√© avec succ√®s, conformit√©:', isCompliant);

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Erreur dans generate-prevention-program:', error);
    return new Response(JSON.stringify({ 
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      details: 'V√©rifiez que ANTHROPIC_API_KEY est correctement configur√©e'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
