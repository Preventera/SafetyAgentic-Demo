// ================================================
// üß† IGNITIA CONTEXTUAL AI - EDGE FUNCTION
// ================================================
// Localisation: supabase/functions/ignitia-contextual-ai/index.ts
// Description: G√©n√©ration IA avec contexte de maturit√© et obstacles

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// ================================================
// üîß INTERFACES TYPESCRIPT
// ================================================

interface MaturityLevel {
  level: 1 | 2 | 3 | 4 | 5;
  name: 'Exploration' | 'Exp√©rimentation' | 'Pilotage' | 'D√©ploiement' | 'Transformation';
  description: string;
}

interface ObstacleContext {
  obstacle: 'donnees' | 'culture' | 'gouvernance' | 'technologie' | 'competences' | 'ethique';
  severity: 'faible' | 'moyen' | 'eleve';
  sector: string;
  specificContext?: string;
}

interface EnhancedAIRequest {
  type: 'maturity_assessment' | 'obstacle_analysis' | 'contextual_recommendations' | 'workflow_guidance';
  prompt: string;
  enrichedContext: {
    maturity: string;
    obstacles: string;
    sector: string;
    originalContext: string;
  };
  maturityLevel?: MaturityLevel;
  obstacles?: ObstacleContext[];
  sector?: string;
  context?: string;
}

// ================================================
// üéØ PROMPTS CONTEXTUELS PAR MATURIT√â
// ================================================

const MATURITY_PROMPTS = {
  1: { // Exploration
    prefix: "En tant qu'expert IA-SST pour une organisation en phase d'EXPLORATION (niveau 1/5), qui d√©couvre l'IA :",
    context: "L'organisation n'a pas encore d'exp√©rience IA. Focus sur la sensibilisation, concepts de base, exemples concrets simples.",
    tone: "P√©dagogique, accessible, rassurant"
  },
  2: { // Exp√©rimentation  
    prefix: "En tant qu'expert IA-SST pour une organisation en phase d'EXP√âRIMENTATION (niveau 2/5), qui teste l'IA :",
    context: "L'organisation fait ses premiers tests. Focus sur les projets pilotes, validation de faisabilit√©, apprentissage.",
    tone: "Encourageant, pratique, orient√© r√©sultats"
  },
  3: { // Pilotage
    prefix: "En tant qu'expert IA-SST pour une organisation en phase de PILOTAGE (niveau 3/5), qui d√©ploie des solutions :",
    context: "L'organisation a des projets en cours. Focus sur l'optimisation, la mont√©e en √©chelle, les bonnes pratiques.",
    tone: "Strat√©gique, d√©taill√©, orient√© performance"
  },
  4: { // D√©ploiement
    prefix: "En tant qu'expert IA-SST pour une organisation en phase de D√âPLOIEMENT (niveau 4/5), qui g√©n√©ralise l'IA :",
    context: "L'organisation d√©ploie √† grande √©chelle. Focus sur l'int√©gration syst√©mique, la gouvernance, la standardisation.",
    tone: "Expert, syst√©mique, orient√© gouvernance"
  },
  5: { // Transformation
    prefix: "En tant qu'expert IA-SST pour une organisation en phase de TRANSFORMATION (niveau 5/5), leader en IA :",
    context: "L'organisation est leader IA. Focus sur l'innovation, la transformation m√©tier, la diff√©renciation concurrentielle.",
    tone: "Innovant, visionnaire, orient√© transformation"
  }
};

// ================================================
// üîß PROMPTS SP√âCIALIS√âS PAR OBSTACLE
// ================================================

const OBSTACLE_PROMPTS = {
  donnees: {
    analysis: "Analysez les d√©fis li√©s aux DONN√âES : qualit√©, disponibilit√©, protection, gouvernance data.",
    solutions: "Proposez des solutions concr√®tes pour am√©liorer la gestion des donn√©es SST.",
    examples: "Donnez des exemples de bonnes pratiques en mati√®re de donn√©es SST."
  },
  culture: {
    analysis: "Analysez les r√©sistances CULTURELLES : adoption, formation, conduite du changement.",
    solutions: "Proposez des strat√©gies pour faciliter l'acceptation de l'IA par les √©quipes SST.",
    examples: "Partagez des exemples de transformation culturelle r√©ussie en SST."
  },
  gouvernance: {
    analysis: "Analysez les enjeux de GOUVERNANCE : conformit√©, responsabilit√©, audit, √©thique.",
    solutions: "Proposez un cadre de gouvernance IA adapt√© au contexte SST.",
    examples: "Illustrez avec des exemples de gouvernance IA effective en entreprise."
  },
  technologie: {
    analysis: "Analysez les d√©fis TECHNOLOGIQUES : infrastructure, int√©gration, performance, s√©curit√©.",
    solutions: "Recommandez les technologies et architectures adapt√©es aux besoins SST.",
    examples: "Pr√©sentez des cas d'usage technologiques concrets en SST."
  },
  competences: {
    analysis: "Analysez les besoins en COMP√âTENCES : formation, recrutement, mont√©e en comp√©tence.",
    solutions: "Proposez un plan de d√©veloppement des comp√©tences IA-SST.",
    examples: "Donnez des exemples de programmes de formation IA r√©ussis."
  },
  ethique: {
    analysis: "Analysez les enjeux √âTHIQUES : biais, transparence, explicabilit√©, responsabilit√©.",
    solutions: "Proposez un cadre √©thique pour l'IA en sant√©-s√©curit√© au travail.",
    examples: "Illustrez avec des exemples d'IA √©thique et responsable en entreprise."
  }
};

// ================================================
// üß† MOTEUR DE G√âN√âRATION CONTEXTUELLE
// ================================================

function buildContextualPrompt(request: EnhancedAIRequest): string {
  const { type, prompt, enrichedContext, maturityLevel, obstacles } = request;
  
  // Base du prompt selon le niveau de maturit√©
  const maturityContext = maturityLevel ? MATURITY_PROMPTS[maturityLevel.level] : null;
  
  // Contexte des obstacles
  const obstacleContext = obstacles?.map(obs => 
    `${OBSTACLE_PROMPTS[obs.obstacle].analysis} (Gravit√©: ${obs.severity})`
  ).join('\n') || '';
  
  // Construction du prompt final
  let contextualPrompt = '';
  
  if (maturityContext) {
    contextualPrompt += `${maturityContext.prefix}\n\n`;
    contextualPrompt += `CONTEXTE ORGANISATION: ${maturityContext.context}\n`;
    contextualPrompt += `TONE REQUIS: ${maturityContext.tone}\n\n`;
  }
  
  if (obstacleContext) {
    contextualPrompt += `OBSTACLES IDENTIFI√âS:\n${obstacleContext}\n\n`;
  }
  
  if (enrichedContext.sector) {
    contextualPrompt += `SECTEUR D'ACTIVIT√â: ${enrichedContext.sector}\n\n`;
  }
  
  contextualPrompt += `DEMANDE SP√âCIFIQUE:\n${prompt}\n\n`;
  
  if (enrichedContext.originalContext) {
    contextualPrompt += `CONTEXTE SUPPL√âMENTAIRE:\n${enrichedContext.originalContext}\n\n`;
  }
  
  // Instructions finales selon le type
  switch (type) {
    case 'maturity_assessment':
      contextualPrompt += `INSTRUCTIONS: Fournissez une √©valuation de maturit√© IA-SST adapt√©e au niveau ${maturityLevel?.level || 'non sp√©cifi√©'}, avec des recommandations actionnables et des √©tapes concr√®tes.`;
      break;
    case 'obstacle_analysis':
      contextualPrompt += `INSTRUCTIONS: Analysez les obstacles en profondeur et proposez un plan d'action structur√© avec des solutions pratiques et des indicateurs de succ√®s.`;
      break;
    case 'contextual_recommendations':
      contextualPrompt += `INSTRUCTIONS: G√©n√©rez des recommandations personnalis√©es bas√©es sur le contexte organisationnel, avec des priorit√©s et des livrables concrets.`;
      break;
    case 'workflow_guidance':
      contextualPrompt += `INSTRUCTIONS: Fournissez une guidance workflow d√©taill√©e avec des √©tapes s√©quentielles, des outils recommand√©s et des crit√®res de validation.`;
      break;
  }
  
  return contextualPrompt;
}

// ================================================
// üöÄ FONCTION PRINCIPALE
// ================================================

serve(async (req) => {
  // CORS headers
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  }

  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Parse request
    const request: EnhancedAIRequest = await req.json()
    console.log('üß† IGNITIA Contextual AI Request:', request.type)

    // Build contextual prompt
    const contextualPrompt = buildContextualPrompt(request)
    console.log('üìù Contextual Prompt Built:', contextualPrompt.substring(0, 200) + '...')

    // Initialize OpenAI (via Supabase env)
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
    
    if (!openaiApiKey) {
      throw new Error('OPENAI_API_KEY not configured')
    }

    // Call OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en intelligence artificielle appliqu√©e √† la sant√© et s√©curit√© au travail (SST), sp√©cialis√© dans l\'√©valuation de maturit√© organisationnelle et l\'accompagnement de transformation digitale. Tu ma√Ætrises les r√©glementations SST qu√©b√©coises/canadiennes et les meilleures pratiques internationales.'
          },
          {
            role: 'user',
            content: contextualPrompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      }),
    })

    if (!openaiResponse.ok) {
      const error = await openaiResponse.text()
      console.error('‚ùå OpenAI API Error:', error)
      throw new Error(`OpenAI API Error: ${error}`)
    }

    const openaiData = await openaiResponse.json()
    const result = openaiData.choices[0]?.message?.content

    console.log('‚úÖ IGNITIA Contextual AI Success')

    return new Response(
      JSON.stringify({ 
        result,
        metadata: {
          type: request.type,
          maturityLevel: request.maturityLevel?.level,
          obstaclesCount: request.obstacles?.length || 0,
          sector: request.sector,
          timestamp: new Date().toISOString()
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    )

  } catch (error) {
    console.error('‚ùå IGNITIA Contextual AI Error:', error)
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        type: 'ignitia_contextual_ai_error',
        timestamp: new Date().toISOString()
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      },
    )
  }
})